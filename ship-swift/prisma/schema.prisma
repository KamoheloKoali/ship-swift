
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model clients {
  Id               String           @id
  email            String           @unique
  phoneNumber      String
  firstName        String
  lastName         String
  photoUrl         String
  idPhotoUrl       String
  dateCreated      DateTime         @default(now()) // Tracks when the client account was created
  dateUpdated      DateTime         @updatedAt // Automatically updates when modified

  // Relations
  courierJobs CourierJobs[]
  clientRequests clientRequests[]
  driverRequests DriverRequests[]
}


model Drivers {
  Id               String           @id
  email            String           @unique
  phoneNumber      String
  firstName        String
  lastName         String
  photoUrl         String
  idPhotoUrl       String
  vehicleType      String
  vehicleDetails   String[]
  dateCreated      DateTime         @default(now()) // Tracks when the client account was created
  dateUpdated      DateTime         @updatedAt // Automatically updates when modified

  // relations
  driveRequests DriverRequests[]
  clientRequests clientRequests[]
}

model CourierJobs {
  Id               String           @id @default(uuid())
  Title            String
  Description      String
  Budget           String

  // Foreign Keys and Relations
  client   clients  @relation(fields: [clientId], references: [Id])
  clientId String // Foreign key for clients
}

model DriverRequests {
  Id            String            @id @default(uuid())
  message       String
  isPending     Boolean           @default(false)
  isAccepted     Boolean           @default(false)

  // Foreign Keys and Relations
  sender   Drivers  @relation(fields: [senderId], references: [Id])
  senderId String // Foreign key for Driver (driver)

  receiver   clients  @relation(fields: [receiverId], references: [Id])
  receiverId String // Foreign key for clients (client)
}

model clientRequests {
  Id            String            @id @default(uuid())
  message       String
  isPending     Boolean           @default(false)
  isAccepted     Boolean           @default(false)

  sender   clients  @relation(fields: [senderId], references: [Id])
  senderId String // Foreign key for clients (client)

  // Foreign Keys and Relations
  receiver   Drivers  @relation(fields: [receiverId], references: [Id])
  receiverId String // Foreign key for Driver (driver)
}